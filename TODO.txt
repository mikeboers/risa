
- beacons
    - risa.beacon.run() -> starts a thread which handles ping requests
    - risa-ping -> pings everything, waits a second for responses

- systemd service files
    gpio-perms at startup

- risa-fab for fabric

- deal with replay attacks
    - only accept messages within a limit of the current time

- What parts understand what season it is?
	- Is it possible to have seasonal safety built in?

- Document the docs are at: https://www.kernel.org/doc/Documentation/gpio/sysfs.txt

- risa-initperms, at startup, as root, to setup all GPIO pins and their permissions

- risa-wirectl for controlling the GPIO pins:

	- `risa-wirectl (heat|hot|cold|ac|fan|ambient) [fan_speed]`
	- `risa-wirectl [status]`
	- `risa-wirectl (stop|off)`

	- Built on top of a shared library for this, so that
	  the safety and controll contrains are universal.

	- Built-in safety:
		- cannot open the valve without at least some fan speed.
		- presense of `down` or `stop` file means that the.
		  system will not respond to anything except stop commands.

	- Consider writing in C so we don't have all the fuckery
	  of the Python runtime.

	- Pins during testing:
		35, GPIO 19
		36, GPIO 16
		37, GPIO 26
		38, GPIO 20
		40, GPIO 21

- risa-envd for taking temp inputs, and turning them into controls.

	- First version takes current (or locally averaged) state, and
	  acts only on that.
	  	- Should the average temp be pulled up/down (in accordance
	  	  with the season)? Open the valve!
	  	  	- Have a min and max temperature range, e.g. in winter:
	  	  		- Is it colder than min? Turn on the heat!
	  	  		- Is it warmer than max? Turn off the heat!
	  	- Are the rooms too different? Turn on the fans!
	  		- Have thresholds for each of the speeds, e.g.:
	  			- < 1째C -> turn it off
	  			- < 2째C -> speed 1
	  			- < 8째C -> speed 2
	  			- >=8째C -> speed 3

- risa-envctl for changing the envd's parameters
- risa-envgui for GUI envd controlling


